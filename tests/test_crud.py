#!/usr/bin/env python3
"""
Teste do Sistema CRUD de Pacientes e M√©dicos
"""

from utils.relational_checks import RelationalIntegrityChecker

def test_validations():
    """Testa as valida√ß√µes do sistema"""
    
    print("Testando Sistema CRUD - Pacientes e M√©dicos")
    print("=" * 60)
    
    checker = RelationalIntegrityChecker()
    
    # Teste 1: Valida√ß√£o de CPF
    print("\n1Ô∏è‚É£ Teste de Valida√ß√£o de CPF:")
    cpfs_teste = [
        "12345678901",      # Inv√°lido
        "11111111111",      # Inv√°lido (todos iguais)
        "123.456.789-09",   # V√°lido
        "000.000.000-00",   # Inv√°lido
        "12345678900"       # Inv√°lido
    ]
    
    for cpf in cpfs_teste:
        valido = checker.validate_cpf(cpf)
        status = "‚úÖ V√°lido" if valido else "‚ùå Inv√°lido"
        print(f"   CPF {cpf}: {status}")
    
    # Teste 2: Valida√ß√£o de CRM
    print("\n2Ô∏è‚É£ Teste de Valida√ß√£o de CRM:")
    crms_teste = [
        "CRM/SP 123456",    # V√°lido
        "CRM/RJ 98765",     # V√°lido
        "crm/mg 54321",     # V√°lido (ser√° convertido)
        "CRM123456",        # Inv√°lido
        "123456",           # Inv√°lido
        "CRM/SP123456"      # Inv√°lido (sem espa√ßo)
    ]
    
    for crm in crms_teste:
        valido = checker.validate_crm(crm)
        status = "‚úÖ V√°lido" if valido else "‚ùå Inv√°lido"
        print(f"   CRM {crm}: {status}")
    
    # Teste 3: Formata√ß√£o de CPF
    print("\n3Ô∏è‚É£ Teste de Formata√ß√£o de CPF:")
    cpfs_format = ["12345678909", "123.456.789-09", ""]
    
    for cpf in cpfs_format:
        formatado = checker.format_cpf(cpf)
        print(f"   Original: '{cpf}' ‚Üí Formatado: '{formatado}'")
    
    # Teste 4: Valida√ß√£o de dados de paciente
    print("\n4Ô∏è‚É£ Teste de Valida√ß√£o de Dados de Paciente:")
    
    # Dados v√°lidos
    paciente_valido = {
        'nome': 'Jo√£o Silva Santos',
        'cpf': '123.456.789-09',
        'data_nascimento': '1985-03-15',
        'genero': 'M',
        'telefone': '(11) 99999-9999',
        'email': 'joao@email.com'
    }
    
    resultado = checker.validate_patient_data(paciente_valido)
    print(f"   Paciente v√°lido: {'‚úÖ OK' if resultado['valid'] else '‚ùå Erro'}")
    if not resultado['valid']:
        for error in resultado['errors']:
            print(f"     - {error}")
    
    # Dados inv√°lidos
    paciente_invalido = {
        'nome': '',  # Nome vazio
        'cpf': '111.111.111-11',  # CPF inv√°lido
        'data_nascimento': '',
        'genero': '',
        'telefone': '',
        'email': 'email_invalido'  # Email inv√°lido
    }
    
    resultado = checker.validate_patient_data(paciente_invalido)
    print(f"   Paciente inv√°lido: {'‚úÖ OK' if resultado['valid'] else '‚ùå Erro (esperado)'}")
    if not resultado['valid']:
        print("     Erros encontrados:")
        for error in resultado['errors']:
            print(f"     - {error}")
    
    # Teste 5: Valida√ß√£o de dados de m√©dico
    print("\n5Ô∏è‚É£ Teste de Valida√ß√£o de Dados de M√©dico:")
    
    # Dados v√°lidos
    medico_valido = {
        'nome': 'Dra. Maria Oliveira',
        'crm': 'CRM/SP 123456',
        'especialidade': 'Cardiologia',
        'telefone': '(11) 3456-7890',
        'email': 'maria@clinica.com'
    }
    
    resultado = checker.validate_doctor_data(medico_valido)
    print(f"   M√©dico v√°lido: {'‚úÖ OK' if resultado['valid'] else '‚ùå Erro'}")
    if not resultado['valid']:
        for error in resultado['errors']:
            print(f"     - {error}")
    
    # Dados inv√°lidos
    medico_invalido = {
        'nome': '',  # Nome vazio
        'crm': 'CRM123',  # CRM inv√°lido
        'especialidade': '',  # Especialidade vazia
        'telefone': '',  # Telefone vazio
        'email': 'email@'  # Email inv√°lido
    }
    
    resultado = checker.validate_doctor_data(medico_invalido)
    print(f"   M√©dico inv√°lido: {'‚úÖ OK' if resultado['valid'] else '‚ùå Erro (esperado)'}")
    if not resultado['valid']:
        print("     Erros encontrados:")
        for error in resultado['errors']:
            print(f"     - {error}")
    
    print("\n" + "=" * 60)
    print("‚úÖ Testes de valida√ß√£o conclu√≠dos!")
    print("\n Funcionalidades CRUD Implementadas:")
    print("   ‚Ä¢ ‚úÖ Valida√ß√£o de CPF e CRM")
    print("   ‚Ä¢ ‚úÖ Verifica√ß√£o de duplicidade")
    print("   ‚Ä¢ ‚úÖ Valida√ß√£o de campos obrigat√≥rios")
    print("   ‚Ä¢ ‚úÖ Valida√ß√£o de email")
    print("   ‚Ä¢ ‚úÖ Formata√ß√£o autom√°tica")
    print("   ‚Ä¢ ‚úÖ Verifica√ß√£o de integridade referencial")
    
    print("\n P√°ginas CRUD Dispon√≠veis:")
    print("   ‚Ä¢ üë• /pacientes - Gest√£o completa de pacientes")
    print("   ‚Ä¢ üë®‚Äç‚öïÔ∏è /medicos - Gest√£o completa de m√©dicos")
    
    print("\n Regras de Integridade:")
    print("   ‚Ä¢ M√©dicos n√£o podem ser exclu√≠dos se tiverem consultas")
    print("   ‚Ä¢ Pacientes n√£o podem ser exclu√≠dos se tiverem hist√≥rico")
    print("   ‚Ä¢ CPF e CRM devem ser √∫nicos no sistema")
    print("   ‚Ä¢ Valida√ß√£o em tempo real nos formul√°rios")

if __name__ == "__main__":
    test_validations()
